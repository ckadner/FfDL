# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ObjectLocation(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, type: str=None, connection: object=None, location: object=None):  # noqa: E501
        """ObjectLocation - a model defined in Swagger

        :param name: The name of this ObjectLocation.  # noqa: E501
        :type name: str
        :param type: The type of this ObjectLocation.  # noqa: E501
        :type type: str
        :param connection: The connection of this ObjectLocation.  # noqa: E501
        :type connection: object
        :param location: The location of this ObjectLocation.  # noqa: E501
        :type location: object
        """
        self.swagger_types = {
            'name': str,
            'type': str,
            'connection': object,
            'location': object
        }

        self.attribute_map = {
            'name': 'name',
            'type': 'type',
            'connection': 'connection',
            'location': 'location'
        }

        self._name = name
        self._type = type
        self._connection = connection
        self._location = location

    @classmethod
    def from_dict(cls, dikt) -> 'ObjectLocation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The object_location of this ObjectLocation.  # noqa: E501
        :rtype: ObjectLocation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this ObjectLocation.


        :return: The name of this ObjectLocation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this ObjectLocation.


        :param name: The name of this ObjectLocation.
        :type name: str
        """

        self._name = name

    @property
    def type(self) -> str:
        """Gets the type of this ObjectLocation.

        The data source type like COS or dashDB. Allowed values for type are 's3' for COS and 'dashdb' for dashDB  # noqa: E501

        :return: The type of this ObjectLocation.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this ObjectLocation.

        The data source type like COS or dashDB. Allowed values for type are 's3' for COS and 'dashdb' for dashDB  # noqa: E501

        :param type: The type of this ObjectLocation.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def connection(self) -> object:
        """Gets the connection of this ObjectLocation.


        :return: The connection of this ObjectLocation.
        :rtype: object
        """
        return self._connection

    @connection.setter
    def connection(self, connection: object):
        """Sets the connection of this ObjectLocation.


        :param connection: The connection of this ObjectLocation.
        :type connection: object
        """
        if connection is None:
            raise ValueError("Invalid value for `connection`, must not be `None`")  # noqa: E501

        self._connection = connection

    @property
    def location(self) -> object:
        """Gets the location of this ObjectLocation.

        For sentiment models, path will be hybrid pipeline id e.g.4cedab6d-e8e4-4214-b81a-2ddb122db2ab. For DL models, path will be training directory name e.g. training-ZZaQeX7mR  # noqa: E501

        :return: The location of this ObjectLocation.
        :rtype: object
        """
        return self._location

    @location.setter
    def location(self, location: object):
        """Sets the location of this ObjectLocation.

        For sentiment models, path will be hybrid pipeline id e.g.4cedab6d-e8e4-4214-b81a-2ddb122db2ab. For DL models, path will be training directory name e.g. training-ZZaQeX7mR  # noqa: E501

        :param location: The location of this ObjectLocation.
        :type location: object
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501

        self._location = location
