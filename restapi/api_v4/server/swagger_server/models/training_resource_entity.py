# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.data_reference import DataReference  # noqa: F401,E501
from swagger_server.models.experiment_object import ExperimentObject  # noqa: F401,E501
from swagger_server.models.object_location import ObjectLocation  # noqa: F401,E501
from swagger_server.models.pipeline_object import PipelineObject  # noqa: F401,E501
from swagger_server.models.status import Status  # noqa: F401,E501
from swagger_server.models.tags import Tags  # noqa: F401,E501
from swagger_server.models.training_resource import TrainingResource  # noqa: F401,E501
from swagger_server.models.training_resource_entity_request import TrainingResourceEntityRequest  # noqa: F401,E501
from swagger_server import util


class TrainingResourceEntity(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, tags: Tags=None, experiment: ExperimentObject=None, pipeline: PipelineObject=None, training_data_references: List[DataReference]=None, results_reference: ObjectLocation=None, status: Status=None, sub_trainings: List[TrainingResource]=None):  # noqa: E501
        """TrainingResourceEntity - a model defined in Swagger

        :param tags: The tags of this TrainingResourceEntity.  # noqa: E501
        :type tags: Tags
        :param experiment: The experiment of this TrainingResourceEntity.  # noqa: E501
        :type experiment: ExperimentObject
        :param pipeline: The pipeline of this TrainingResourceEntity.  # noqa: E501
        :type pipeline: PipelineObject
        :param training_data_references: The training_data_references of this TrainingResourceEntity.  # noqa: E501
        :type training_data_references: List[DataReference]
        :param results_reference: The results_reference of this TrainingResourceEntity.  # noqa: E501
        :type results_reference: ObjectLocation
        :param status: The status of this TrainingResourceEntity.  # noqa: E501
        :type status: Status
        :param sub_trainings: The sub_trainings of this TrainingResourceEntity.  # noqa: E501
        :type sub_trainings: List[TrainingResource]
        """
        self.swagger_types = {
            'tags': Tags,
            'experiment': ExperimentObject,
            'pipeline': PipelineObject,
            'training_data_references': List[DataReference],
            'results_reference': ObjectLocation,
            'status': Status,
            'sub_trainings': List[TrainingResource]
        }

        self.attribute_map = {
            'tags': 'tags',
            'experiment': 'experiment',
            'pipeline': 'pipeline',
            'training_data_references': 'training_data_references',
            'results_reference': 'results_reference',
            'status': 'status',
            'sub_trainings': 'sub_trainings'
        }

        self._tags = tags
        self._experiment = experiment
        self._pipeline = pipeline
        self._training_data_references = training_data_references
        self._results_reference = results_reference
        self._status = status
        self._sub_trainings = sub_trainings

    @classmethod
    def from_dict(cls, dikt) -> 'TrainingResourceEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The training_resource_entity of this TrainingResourceEntity.  # noqa: E501
        :rtype: TrainingResourceEntity
        """
        return util.deserialize_model(dikt, cls)

    @property
    def tags(self) -> Tags:
        """Gets the tags of this TrainingResourceEntity.


        :return: The tags of this TrainingResourceEntity.
        :rtype: Tags
        """
        return self._tags

    @tags.setter
    def tags(self, tags: Tags):
        """Sets the tags of this TrainingResourceEntity.


        :param tags: The tags of this TrainingResourceEntity.
        :type tags: Tags
        """

        self._tags = tags

    @property
    def experiment(self) -> ExperimentObject:
        """Gets the experiment of this TrainingResourceEntity.


        :return: The experiment of this TrainingResourceEntity.
        :rtype: ExperimentObject
        """
        return self._experiment

    @experiment.setter
    def experiment(self, experiment: ExperimentObject):
        """Sets the experiment of this TrainingResourceEntity.


        :param experiment: The experiment of this TrainingResourceEntity.
        :type experiment: ExperimentObject
        """

        self._experiment = experiment

    @property
    def pipeline(self) -> PipelineObject:
        """Gets the pipeline of this TrainingResourceEntity.


        :return: The pipeline of this TrainingResourceEntity.
        :rtype: PipelineObject
        """
        return self._pipeline

    @pipeline.setter
    def pipeline(self, pipeline: PipelineObject):
        """Sets the pipeline of this TrainingResourceEntity.


        :param pipeline: The pipeline of this TrainingResourceEntity.
        :type pipeline: PipelineObject
        """

        self._pipeline = pipeline

    @property
    def training_data_references(self) -> List[DataReference]:
        """Gets the training_data_references of this TrainingResourceEntity.


        :return: The training_data_references of this TrainingResourceEntity.
        :rtype: List[DataReference]
        """
        return self._training_data_references

    @training_data_references.setter
    def training_data_references(self, training_data_references: List[DataReference]):
        """Sets the training_data_references of this TrainingResourceEntity.


        :param training_data_references: The training_data_references of this TrainingResourceEntity.
        :type training_data_references: List[DataReference]
        """
        if training_data_references is None:
            raise ValueError("Invalid value for `training_data_references`, must not be `None`")  # noqa: E501

        self._training_data_references = training_data_references

    @property
    def results_reference(self) -> ObjectLocation:
        """Gets the results_reference of this TrainingResourceEntity.


        :return: The results_reference of this TrainingResourceEntity.
        :rtype: ObjectLocation
        """
        return self._results_reference

    @results_reference.setter
    def results_reference(self, results_reference: ObjectLocation):
        """Sets the results_reference of this TrainingResourceEntity.


        :param results_reference: The results_reference of this TrainingResourceEntity.
        :type results_reference: ObjectLocation
        """
        if results_reference is None:
            raise ValueError("Invalid value for `results_reference`, must not be `None`")  # noqa: E501

        self._results_reference = results_reference

    @property
    def status(self) -> Status:
        """Gets the status of this TrainingResourceEntity.


        :return: The status of this TrainingResourceEntity.
        :rtype: Status
        """
        return self._status

    @status.setter
    def status(self, status: Status):
        """Sets the status of this TrainingResourceEntity.


        :param status: The status of this TrainingResourceEntity.
        :type status: Status
        """

        self._status = status

    @property
    def sub_trainings(self) -> List[TrainingResource]:
        """Gets the sub_trainings of this TrainingResourceEntity.


        :return: The sub_trainings of this TrainingResourceEntity.
        :rtype: List[TrainingResource]
        """
        return self._sub_trainings

    @sub_trainings.setter
    def sub_trainings(self, sub_trainings: List[TrainingResource]):
        """Sets the sub_trainings of this TrainingResourceEntity.


        :param sub_trainings: The sub_trainings of this TrainingResourceEntity.
        :type sub_trainings: List[TrainingResource]
        """

        self._sub_trainings = sub_trainings
