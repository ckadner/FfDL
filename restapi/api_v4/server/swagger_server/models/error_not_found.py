# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.error_not_found_errors import ErrorNotFoundErrors  # noqa: F401,E501
from swagger_server import util


class ErrorNotFound(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, trace: str=None, errors: List[ErrorNotFoundErrors]=None):  # noqa: E501
        """ErrorNotFound - a model defined in Swagger

        :param trace: The trace of this ErrorNotFound.  # noqa: E501
        :type trace: str
        :param errors: The errors of this ErrorNotFound.  # noqa: E501
        :type errors: List[ErrorNotFoundErrors]
        """
        self.swagger_types = {
            'trace': str,
            'errors': List[ErrorNotFoundErrors]
        }

        self.attribute_map = {
            'trace': 'trace',
            'errors': 'errors'
        }

        self._trace = trace
        self._errors = errors

    @classmethod
    def from_dict(cls, dikt) -> 'ErrorNotFound':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The error_not_found of this ErrorNotFound.  # noqa: E501
        :rtype: ErrorNotFound
        """
        return util.deserialize_model(dikt, cls)

    @property
    def trace(self) -> str:
        """Gets the trace of this ErrorNotFound.


        :return: The trace of this ErrorNotFound.
        :rtype: str
        """
        return self._trace

    @trace.setter
    def trace(self, trace: str):
        """Sets the trace of this ErrorNotFound.


        :param trace: The trace of this ErrorNotFound.
        :type trace: str
        """
        if trace is None:
            raise ValueError("Invalid value for `trace`, must not be `None`")  # noqa: E501

        self._trace = trace

    @property
    def errors(self) -> List[ErrorNotFoundErrors]:
        """Gets the errors of this ErrorNotFound.


        :return: The errors of this ErrorNotFound.
        :rtype: List[ErrorNotFoundErrors]
        """
        return self._errors

    @errors.setter
    def errors(self, errors: List[ErrorNotFoundErrors]):
        """Sets the errors of this ErrorNotFound.


        :param errors: The errors of this ErrorNotFound.
        :type errors: List[ErrorNotFoundErrors]
        """
        if errors is None:
            raise ValueError("Invalid value for `errors`, must not be `None`")  # noqa: E501

        self._errors = errors
