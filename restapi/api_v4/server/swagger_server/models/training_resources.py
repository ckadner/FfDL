# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.pagination import Pagination  # noqa: F401,E501
from swagger_server.models.training_resource import TrainingResource  # noqa: F401,E501
from swagger_server.models.url_object import UrlObject  # noqa: F401,E501
from swagger_server import util


class TrainingResources(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, first: UrlObject=None, next: UrlObject=None, limit: float=None, resources: List[TrainingResource]=None):  # noqa: E501
        """TrainingResources - a model defined in Swagger

        :param first: The first of this TrainingResources.  # noqa: E501
        :type first: UrlObject
        :param next: The next of this TrainingResources.  # noqa: E501
        :type next: UrlObject
        :param limit: The limit of this TrainingResources.  # noqa: E501
        :type limit: float
        :param resources: The resources of this TrainingResources.  # noqa: E501
        :type resources: List[TrainingResource]
        """
        self.swagger_types = {
            'first': UrlObject,
            'next': UrlObject,
            'limit': float,
            'resources': List[TrainingResource]
        }

        self.attribute_map = {
            'first': 'first',
            'next': 'next',
            'limit': 'limit',
            'resources': 'resources'
        }

        self._first = first
        self._next = next
        self._limit = limit
        self._resources = resources

    @classmethod
    def from_dict(cls, dikt) -> 'TrainingResources':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The training_resources of this TrainingResources.  # noqa: E501
        :rtype: TrainingResources
        """
        return util.deserialize_model(dikt, cls)

    @property
    def first(self) -> UrlObject:
        """Gets the first of this TrainingResources.


        :return: The first of this TrainingResources.
        :rtype: UrlObject
        """
        return self._first

    @first.setter
    def first(self, first: UrlObject):
        """Sets the first of this TrainingResources.


        :param first: The first of this TrainingResources.
        :type first: UrlObject
        """

        self._first = first

    @property
    def next(self) -> UrlObject:
        """Gets the next of this TrainingResources.


        :return: The next of this TrainingResources.
        :rtype: UrlObject
        """
        return self._next

    @next.setter
    def next(self, next: UrlObject):
        """Sets the next of this TrainingResources.


        :param next: The next of this TrainingResources.
        :type next: UrlObject
        """

        self._next = next

    @property
    def limit(self) -> float:
        """Gets the limit of this TrainingResources.


        :return: The limit of this TrainingResources.
        :rtype: float
        """
        return self._limit

    @limit.setter
    def limit(self, limit: float):
        """Sets the limit of this TrainingResources.


        :param limit: The limit of this TrainingResources.
        :type limit: float
        """

        self._limit = limit

    @property
    def resources(self) -> List[TrainingResource]:
        """Gets the resources of this TrainingResources.


        :return: The resources of this TrainingResources.
        :rtype: List[TrainingResource]
        """
        return self._resources

    @resources.setter
    def resources(self, resources: List[TrainingResource]):
        """Sets the resources of this TrainingResources.


        :param resources: The resources of this TrainingResources.
        :type resources: List[TrainingResource]
        """

        self._resources = resources
