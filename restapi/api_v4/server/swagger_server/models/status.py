# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.error import Error  # noqa: F401,E501
from swagger_server.models.metrics import Metrics  # noqa: F401,E501
from swagger_server.models.status_message import StatusMessage  # noqa: F401,E501
from swagger_server import util


class Status(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, running_at: datetime=None, finished_at: datetime=None, iteration: float=None, total_iterations: float=None, state: str=None, message: StatusMessage=None, metrics: Metrics=None, failure: Error=None):  # noqa: E501
        """Status - a model defined in Swagger

        :param running_at: The running_at of this Status.  # noqa: E501
        :type running_at: datetime
        :param finished_at: The finished_at of this Status.  # noqa: E501
        :type finished_at: datetime
        :param iteration: The iteration of this Status.  # noqa: E501
        :type iteration: float
        :param total_iterations: The total_iterations of this Status.  # noqa: E501
        :type total_iterations: float
        :param state: The state of this Status.  # noqa: E501
        :type state: str
        :param message: The message of this Status.  # noqa: E501
        :type message: StatusMessage
        :param metrics: The metrics of this Status.  # noqa: E501
        :type metrics: Metrics
        :param failure: The failure of this Status.  # noqa: E501
        :type failure: Error
        """
        self.swagger_types = {
            'running_at': datetime,
            'finished_at': datetime,
            'iteration': float,
            'total_iterations': float,
            'state': str,
            'message': StatusMessage,
            'metrics': Metrics,
            'failure': Error
        }

        self.attribute_map = {
            'running_at': 'running_at',
            'finished_at': 'finished_at',
            'iteration': 'iteration',
            'total_iterations': 'total_iterations',
            'state': 'state',
            'message': 'message',
            'metrics': 'metrics',
            'failure': 'failure'
        }

        self._running_at = running_at
        self._finished_at = finished_at
        self._iteration = iteration
        self._total_iterations = total_iterations
        self._state = state
        self._message = message
        self._metrics = metrics
        self._failure = failure

    @classmethod
    def from_dict(cls, dikt) -> 'Status':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The status of this Status.  # noqa: E501
        :rtype: Status
        """
        return util.deserialize_model(dikt, cls)

    @property
    def running_at(self) -> datetime:
        """Gets the running_at of this Status.


        :return: The running_at of this Status.
        :rtype: datetime
        """
        return self._running_at

    @running_at.setter
    def running_at(self, running_at: datetime):
        """Sets the running_at of this Status.


        :param running_at: The running_at of this Status.
        :type running_at: datetime
        """

        self._running_at = running_at

    @property
    def finished_at(self) -> datetime:
        """Gets the finished_at of this Status.


        :return: The finished_at of this Status.
        :rtype: datetime
        """
        return self._finished_at

    @finished_at.setter
    def finished_at(self, finished_at: datetime):
        """Sets the finished_at of this Status.


        :param finished_at: The finished_at of this Status.
        :type finished_at: datetime
        """

        self._finished_at = finished_at

    @property
    def iteration(self) -> float:
        """Gets the iteration of this Status.


        :return: The iteration of this Status.
        :rtype: float
        """
        return self._iteration

    @iteration.setter
    def iteration(self, iteration: float):
        """Sets the iteration of this Status.


        :param iteration: The iteration of this Status.
        :type iteration: float
        """

        self._iteration = iteration

    @property
    def total_iterations(self) -> float:
        """Gets the total_iterations of this Status.


        :return: The total_iterations of this Status.
        :rtype: float
        """
        return self._total_iterations

    @total_iterations.setter
    def total_iterations(self, total_iterations: float):
        """Sets the total_iterations of this Status.


        :param total_iterations: The total_iterations of this Status.
        :type total_iterations: float
        """

        self._total_iterations = total_iterations

    @property
    def state(self) -> str:
        """Gets the state of this Status.


        :return: The state of this Status.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state: str):
        """Sets the state of this Status.


        :param state: The state of this Status.
        :type state: str
        """
        allowed_values = ["queued", "pending", "running", "storing", "completed", "failed", "canceled"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def message(self) -> StatusMessage:
        """Gets the message of this Status.


        :return: The message of this Status.
        :rtype: StatusMessage
        """
        return self._message

    @message.setter
    def message(self, message: StatusMessage):
        """Sets the message of this Status.


        :param message: The message of this Status.
        :type message: StatusMessage
        """

        self._message = message

    @property
    def metrics(self) -> Metrics:
        """Gets the metrics of this Status.


        :return: The metrics of this Status.
        :rtype: Metrics
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics: Metrics):
        """Sets the metrics of this Status.


        :param metrics: The metrics of this Status.
        :type metrics: Metrics
        """

        self._metrics = metrics

    @property
    def failure(self) -> Error:
        """Gets the failure of this Status.


        :return: The failure of this Status.
        :rtype: Error
        """
        return self._failure

    @failure.setter
    def failure(self, failure: Error):
        """Sets the failure of this Status.


        :param failure: The failure of this Status.
        :type failure: Error
        """

        self._failure = failure
