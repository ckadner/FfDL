# coding: utf-8

"""
    IBM Watson Machine Learning API

    ## Authorization  Step by step instruction how to use Watson Machine Learning service can be found [here](https://console.ng.bluemix.net/docs/services/PredictiveModeling/using_pm_service_dsx.html#using_pm_service_dsx)  ### IBM Watson Machine Learning Credentials  To start working with API one needs to generate an `access token` using the `username` and `password` available on the Service Credentials tab of the IBM Watson Machine Learning service instance or also available in the VCAP environment variable.  Example of the Service Credentials:  ```json {     \"url\": \"https://us-south.ml.cloud.ibm.com\",     \"access_key\": \"ERY9vcBfE4sE+F4g8hcotF9L+j81WXWeZv\",     \"username\": \"c1ef4b80-2ee2-458e-ab92-e9ca97ec657d\",     \"password\": \"030528d4-5a3e-4d4c-9258-5d553513be6f\",     \"instance_id\": \"a751c209-954e-dc32-b441-ad56ce7a9f40\" } ```  Example of obtaining `access token` from Token Endpoint using HTTP Basic Auth (for details please refer to Token section below):  ` curl --basic --user username:password https://us-south.ml.cloud.ibm.com/v4/identity/token `  The obtained `access token` needs to be prepended with `Bearer` word and it needs to be passed in the `Authorization` header for API calls.  Example of API request with `Bearer access token`:  ` curl https://us-south.ml.cloud.ibm.com/v4/models -H \"Authorization: Bearer eyJhbGciOiJSUzUxMiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRJZCI6ImU4YmQzZGM3LWI5Y2UtNDY1OC1iZ...\" `   # noqa: E501

    OpenAPI spec version: 4.x.y
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class TrainingApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def v4_trainings_get(self, **kwargs):  # noqa: E501
        """Get the list of all trainings  # noqa: E501

        Get the list of all trainings  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.v4_trainings_get(async=True)
        >>> result = thread.get()

        :param async bool
        :param str start: Token required for token-based pagination. This token cannot be determined by end user. It is generated by the service and it is set in the url available in the `next` field.
        :param float limit: How many resources should be returned. By default limit is 100. Max limit allowed is 1000.
        :param str tag_value: Return only the resources with the given tag value
        :param str type: Filter based on 'pipeline' or 'experiment' trainings. Example: type=pipeline. If not provided, returns all the trainings
        :return: TrainingResources
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.v4_trainings_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v4_trainings_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v4_trainings_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get the list of all trainings  # noqa: E501

        Get the list of all trainings  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.v4_trainings_get_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str start: Token required for token-based pagination. This token cannot be determined by end user. It is generated by the service and it is set in the url available in the `next` field.
        :param float limit: How many resources should be returned. By default limit is 100. Max limit allowed is 1000.
        :param str tag_value: Return only the resources with the given tag value
        :param str type: Filter based on 'pipeline' or 'experiment' trainings. Example: type=pipeline. If not provided, returns all the trainings
        :return: TrainingResources
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start', 'limit', 'tag_value', 'type']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_trainings_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'tag_value' in params:
            query_params.append(('tag.value', params['tag_value']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['MLToken']  # noqa: E501

        return self.api_client.call_api(
            '/v4/trainings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrainingResources',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v4_trainings_post(self, **kwargs):  # noqa: E501
        """Create a new Machine Learning training  # noqa: E501

        Create a new Machine Learning training  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.v4_trainings_post(async=True)
        >>> result = thread.get()

        :param async bool
        :param TrainingResourceEntityRequest payload:
        :return: TrainingResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.v4_trainings_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v4_trainings_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def v4_trainings_post_with_http_info(self, **kwargs):  # noqa: E501
        """Create a new Machine Learning training  # noqa: E501

        Create a new Machine Learning training  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.v4_trainings_post_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param TrainingResourceEntityRequest payload:
        :return: TrainingResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payload']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_trainings_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'payload' in params:
            body_params = params['payload']
        # Authentication setting
        auth_settings = ['MLToken']  # noqa: E501

        return self.api_client.call_api(
            '/v4/trainings', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrainingResource',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v4_trainings_training_id_delete(self, training_id, **kwargs):  # noqa: E501
        """Cancel an ongoing training.  # noqa: E501

        Cancel an ongoing training and remove it.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.v4_trainings_training_id_delete(training_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str training_id: training identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.v4_trainings_training_id_delete_with_http_info(training_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v4_trainings_training_id_delete_with_http_info(training_id, **kwargs)  # noqa: E501
            return data

    def v4_trainings_training_id_delete_with_http_info(self, training_id, **kwargs):  # noqa: E501
        """Cancel an ongoing training.  # noqa: E501

        Cancel an ongoing training and remove it.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.v4_trainings_training_id_delete_with_http_info(training_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str training_id: training identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['training_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_trainings_training_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'training_id' is set
        if ('training_id' not in params or
                params['training_id'] is None):
            raise ValueError("Missing the required parameter `training_id` when calling `v4_trainings_training_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'training_id' in params:
            path_params['training_id'] = params['training_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['MLToken']  # noqa: E501

        return self.api_client.call_api(
            '/v4/trainings/{training_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v4_trainings_training_id_get(self, training_id, **kwargs):  # noqa: E501
        """Get the training status  # noqa: E501

        Get the training status. This call supported Web-Socket upgrade. However in order to preserve bandwidth, web-socket messages are not context complete. Meaning that a single web-socket message only reflects a message or metric happening in the context of a training job or sub-job (in case of experiment trainings or HPO/AutoML trainings). Hence the metadata property of a web-socket message contains a parent with the url information of the parent job that triggered this partibular job. Also the metrics will be provided as they arrive from the backend runtime, and not as a cumulative list. In order to get the full view of the running training job the caller should do a regular GET call.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.v4_trainings_training_id_get(training_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str training_id: training identifier (required)
        :return: TrainingResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.v4_trainings_training_id_get_with_http_info(training_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v4_trainings_training_id_get_with_http_info(training_id, **kwargs)  # noqa: E501
            return data

    def v4_trainings_training_id_get_with_http_info(self, training_id, **kwargs):  # noqa: E501
        """Get the training status  # noqa: E501

        Get the training status. This call supported Web-Socket upgrade. However in order to preserve bandwidth, web-socket messages are not context complete. Meaning that a single web-socket message only reflects a message or metric happening in the context of a training job or sub-job (in case of experiment trainings or HPO/AutoML trainings). Hence the metadata property of a web-socket message contains a parent with the url information of the parent job that triggered this partibular job. Also the metrics will be provided as they arrive from the backend runtime, and not as a cumulative list. In order to get the full view of the running training job the caller should do a regular GET call.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.v4_trainings_training_id_get_with_http_info(training_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str training_id: training identifier (required)
        :return: TrainingResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['training_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v4_trainings_training_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'training_id' is set
        if ('training_id' not in params or
                params['training_id'] is None):
            raise ValueError("Missing the required parameter `training_id` when calling `v4_trainings_training_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'training_id' in params:
            path_params['training_id'] = params['training_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['MLToken']  # noqa: E501

        return self.api_client.call_api(
            '/v4/trainings/{training_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrainingResource',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
