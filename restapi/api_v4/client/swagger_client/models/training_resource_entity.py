# coding: utf-8

"""
    IBM Watson Machine Learning API

    ## Authorization  Step by step instruction how to use Watson Machine Learning service can be found [here](https://console.ng.bluemix.net/docs/services/PredictiveModeling/using_pm_service_dsx.html#using_pm_service_dsx)  ### IBM Watson Machine Learning Credentials  To start working with API one needs to generate an `access token` using the `username` and `password` available on the Service Credentials tab of the IBM Watson Machine Learning service instance or also available in the VCAP environment variable.  Example of the Service Credentials:  ```json {     \"url\": \"https://us-south.ml.cloud.ibm.com\",     \"access_key\": \"ERY9vcBfE4sE+F4g8hcotF9L+j81WXWeZv\",     \"username\": \"c1ef4b80-2ee2-458e-ab92-e9ca97ec657d\",     \"password\": \"030528d4-5a3e-4d4c-9258-5d553513be6f\",     \"instance_id\": \"a751c209-954e-dc32-b441-ad56ce7a9f40\" } ```  Example of obtaining `access token` from Token Endpoint using HTTP Basic Auth (for details please refer to Token section below):  ` curl --basic --user username:password https://us-south.ml.cloud.ibm.com/v4/identity/token `  The obtained `access token` needs to be prepended with `Bearer` word and it needs to be passed in the `Authorization` header for API calls.  Example of API request with `Bearer access token`:  ` curl https://us-south.ml.cloud.ibm.com/v4/models -H \"Authorization: Bearer eyJhbGciOiJSUzUxMiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRJZCI6ImU4YmQzZGM3LWI5Y2UtNDY1OC1iZ...\" `   # noqa: E501

    OpenAPI spec version: 4.x.y
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.data_reference import DataReference  # noqa: F401,E501
from swagger_client.models.experiment_object import ExperimentObject  # noqa: F401,E501
from swagger_client.models.object_location import ObjectLocation  # noqa: F401,E501
from swagger_client.models.pipeline_object import PipelineObject  # noqa: F401,E501
from swagger_client.models.status import Status  # noqa: F401,E501
from swagger_client.models.tags import Tags  # noqa: F401,E501
from swagger_client.models.training_resource import TrainingResource  # noqa: F401,E501
from swagger_client.models.training_resource_entity_request import TrainingResourceEntityRequest  # noqa: F401,E501


class TrainingResourceEntity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tags': 'Tags',
        'experiment': 'ExperimentObject',
        'pipeline': 'PipelineObject',
        'training_data_references': 'list[DataReference]',
        'results_reference': 'ObjectLocation',
        'status': 'Status',
        'sub_trainings': 'list[TrainingResource]'
    }

    attribute_map = {
        'tags': 'tags',
        'experiment': 'experiment',
        'pipeline': 'pipeline',
        'training_data_references': 'training_data_references',
        'results_reference': 'results_reference',
        'status': 'status',
        'sub_trainings': 'sub_trainings'
    }

    def __init__(self, tags=None, experiment=None, pipeline=None, training_data_references=None, results_reference=None, status=None, sub_trainings=None):  # noqa: E501
        """TrainingResourceEntity - a model defined in Swagger"""  # noqa: E501

        self._tags = None
        self._experiment = None
        self._pipeline = None
        self._training_data_references = None
        self._results_reference = None
        self._status = None
        self._sub_trainings = None
        self.discriminator = None

        if tags is not None:
            self.tags = tags
        if experiment is not None:
            self.experiment = experiment
        if pipeline is not None:
            self.pipeline = pipeline
        self.training_data_references = training_data_references
        self.results_reference = results_reference
        if status is not None:
            self.status = status
        if sub_trainings is not None:
            self.sub_trainings = sub_trainings

    @property
    def tags(self):
        """Gets the tags of this TrainingResourceEntity.  # noqa: E501


        :return: The tags of this TrainingResourceEntity.  # noqa: E501
        :rtype: Tags
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this TrainingResourceEntity.


        :param tags: The tags of this TrainingResourceEntity.  # noqa: E501
        :type: Tags
        """

        self._tags = tags

    @property
    def experiment(self):
        """Gets the experiment of this TrainingResourceEntity.  # noqa: E501


        :return: The experiment of this TrainingResourceEntity.  # noqa: E501
        :rtype: ExperimentObject
        """
        return self._experiment

    @experiment.setter
    def experiment(self, experiment):
        """Sets the experiment of this TrainingResourceEntity.


        :param experiment: The experiment of this TrainingResourceEntity.  # noqa: E501
        :type: ExperimentObject
        """

        self._experiment = experiment

    @property
    def pipeline(self):
        """Gets the pipeline of this TrainingResourceEntity.  # noqa: E501


        :return: The pipeline of this TrainingResourceEntity.  # noqa: E501
        :rtype: PipelineObject
        """
        return self._pipeline

    @pipeline.setter
    def pipeline(self, pipeline):
        """Sets the pipeline of this TrainingResourceEntity.


        :param pipeline: The pipeline of this TrainingResourceEntity.  # noqa: E501
        :type: PipelineObject
        """

        self._pipeline = pipeline

    @property
    def training_data_references(self):
        """Gets the training_data_references of this TrainingResourceEntity.  # noqa: E501


        :return: The training_data_references of this TrainingResourceEntity.  # noqa: E501
        :rtype: list[DataReference]
        """
        return self._training_data_references

    @training_data_references.setter
    def training_data_references(self, training_data_references):
        """Sets the training_data_references of this TrainingResourceEntity.


        :param training_data_references: The training_data_references of this TrainingResourceEntity.  # noqa: E501
        :type: list[DataReference]
        """
        if training_data_references is None:
            raise ValueError("Invalid value for `training_data_references`, must not be `None`")  # noqa: E501

        self._training_data_references = training_data_references

    @property
    def results_reference(self):
        """Gets the results_reference of this TrainingResourceEntity.  # noqa: E501


        :return: The results_reference of this TrainingResourceEntity.  # noqa: E501
        :rtype: ObjectLocation
        """
        return self._results_reference

    @results_reference.setter
    def results_reference(self, results_reference):
        """Sets the results_reference of this TrainingResourceEntity.


        :param results_reference: The results_reference of this TrainingResourceEntity.  # noqa: E501
        :type: ObjectLocation
        """
        if results_reference is None:
            raise ValueError("Invalid value for `results_reference`, must not be `None`")  # noqa: E501

        self._results_reference = results_reference

    @property
    def status(self):
        """Gets the status of this TrainingResourceEntity.  # noqa: E501


        :return: The status of this TrainingResourceEntity.  # noqa: E501
        :rtype: Status
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TrainingResourceEntity.


        :param status: The status of this TrainingResourceEntity.  # noqa: E501
        :type: Status
        """

        self._status = status

    @property
    def sub_trainings(self):
        """Gets the sub_trainings of this TrainingResourceEntity.  # noqa: E501


        :return: The sub_trainings of this TrainingResourceEntity.  # noqa: E501
        :rtype: list[TrainingResource]
        """
        return self._sub_trainings

    @sub_trainings.setter
    def sub_trainings(self, sub_trainings):
        """Sets the sub_trainings of this TrainingResourceEntity.


        :param sub_trainings: The sub_trainings of this TrainingResourceEntity.  # noqa: E501
        :type: list[TrainingResource]
        """

        self._sub_trainings = sub_trainings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TrainingResourceEntity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
