# coding: utf-8

"""
    IBM Watson Machine Learning API

    ## Authorization  Step by step instruction how to use Watson Machine Learning service can be found [here](https://console.ng.bluemix.net/docs/services/PredictiveModeling/using_pm_service_dsx.html#using_pm_service_dsx)  ### IBM Watson Machine Learning Credentials  To start working with API one needs to generate an `access token` using the `username` and `password` available on the Service Credentials tab of the IBM Watson Machine Learning service instance or also available in the VCAP environment variable.  Example of the Service Credentials:  ```json {     \"url\": \"https://us-south.ml.cloud.ibm.com\",     \"access_key\": \"ERY9vcBfE4sE+F4g8hcotF9L+j81WXWeZv\",     \"username\": \"c1ef4b80-2ee2-458e-ab92-e9ca97ec657d\",     \"password\": \"030528d4-5a3e-4d4c-9258-5d553513be6f\",     \"instance_id\": \"a751c209-954e-dc32-b441-ad56ce7a9f40\" } ```  Example of obtaining `access token` from Token Endpoint using HTTP Basic Auth (for details please refer to Token section below):  ` curl --basic --user username:password https://us-south.ml.cloud.ibm.com/v4/identity/token `  The obtained `access token` needs to be prepended with `Bearer` word and it needs to be passed in the `Authorization` header for API calls.  Example of API request with `Bearer access token`:  ` curl https://us-south.ml.cloud.ibm.com/v4/models -H \"Authorization: Bearer eyJhbGciOiJSUzUxMiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRJZCI6ImU4YmQzZGM3LWI5Y2UtNDY1OC1iZ...\" `   # noqa: E501

    OpenAPI spec version: 4.x.y
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.error import Error  # noqa: F401,E501
from swagger_client.models.metrics import Metrics  # noqa: F401,E501
from swagger_client.models.status_message import StatusMessage  # noqa: F401,E501


class Status(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'running_at': 'datetime',
        'finished_at': 'datetime',
        'iteration': 'float',
        'total_iterations': 'float',
        'state': 'str',
        'message': 'StatusMessage',
        'metrics': 'Metrics',
        'failure': 'Error'
    }

    attribute_map = {
        'running_at': 'running_at',
        'finished_at': 'finished_at',
        'iteration': 'iteration',
        'total_iterations': 'total_iterations',
        'state': 'state',
        'message': 'message',
        'metrics': 'metrics',
        'failure': 'failure'
    }

    def __init__(self, running_at=None, finished_at=None, iteration=None, total_iterations=None, state=None, message=None, metrics=None, failure=None):  # noqa: E501
        """Status - a model defined in Swagger"""  # noqa: E501

        self._running_at = None
        self._finished_at = None
        self._iteration = None
        self._total_iterations = None
        self._state = None
        self._message = None
        self._metrics = None
        self._failure = None
        self.discriminator = None

        if running_at is not None:
            self.running_at = running_at
        if finished_at is not None:
            self.finished_at = finished_at
        if iteration is not None:
            self.iteration = iteration
        if total_iterations is not None:
            self.total_iterations = total_iterations
        self.state = state
        if message is not None:
            self.message = message
        if metrics is not None:
            self.metrics = metrics
        if failure is not None:
            self.failure = failure

    @property
    def running_at(self):
        """Gets the running_at of this Status.  # noqa: E501


        :return: The running_at of this Status.  # noqa: E501
        :rtype: datetime
        """
        return self._running_at

    @running_at.setter
    def running_at(self, running_at):
        """Sets the running_at of this Status.


        :param running_at: The running_at of this Status.  # noqa: E501
        :type: datetime
        """

        self._running_at = running_at

    @property
    def finished_at(self):
        """Gets the finished_at of this Status.  # noqa: E501


        :return: The finished_at of this Status.  # noqa: E501
        :rtype: datetime
        """
        return self._finished_at

    @finished_at.setter
    def finished_at(self, finished_at):
        """Sets the finished_at of this Status.


        :param finished_at: The finished_at of this Status.  # noqa: E501
        :type: datetime
        """

        self._finished_at = finished_at

    @property
    def iteration(self):
        """Gets the iteration of this Status.  # noqa: E501


        :return: The iteration of this Status.  # noqa: E501
        :rtype: float
        """
        return self._iteration

    @iteration.setter
    def iteration(self, iteration):
        """Sets the iteration of this Status.


        :param iteration: The iteration of this Status.  # noqa: E501
        :type: float
        """

        self._iteration = iteration

    @property
    def total_iterations(self):
        """Gets the total_iterations of this Status.  # noqa: E501


        :return: The total_iterations of this Status.  # noqa: E501
        :rtype: float
        """
        return self._total_iterations

    @total_iterations.setter
    def total_iterations(self, total_iterations):
        """Sets the total_iterations of this Status.


        :param total_iterations: The total_iterations of this Status.  # noqa: E501
        :type: float
        """

        self._total_iterations = total_iterations

    @property
    def state(self):
        """Gets the state of this Status.  # noqa: E501


        :return: The state of this Status.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Status.


        :param state: The state of this Status.  # noqa: E501
        :type: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501
        allowed_values = ["queued", "pending", "running", "storing", "completed", "failed", "canceled"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def message(self):
        """Gets the message of this Status.  # noqa: E501


        :return: The message of this Status.  # noqa: E501
        :rtype: StatusMessage
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Status.


        :param message: The message of this Status.  # noqa: E501
        :type: StatusMessage
        """

        self._message = message

    @property
    def metrics(self):
        """Gets the metrics of this Status.  # noqa: E501


        :return: The metrics of this Status.  # noqa: E501
        :rtype: Metrics
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this Status.


        :param metrics: The metrics of this Status.  # noqa: E501
        :type: Metrics
        """

        self._metrics = metrics

    @property
    def failure(self):
        """Gets the failure of this Status.  # noqa: E501


        :return: The failure of this Status.  # noqa: E501
        :rtype: Error
        """
        return self._failure

    @failure.setter
    def failure(self, failure):
        """Sets the failure of this Status.


        :param failure: The failure of this Status.  # noqa: E501
        :type: Error
        """

        self._failure = failure

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Status):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
