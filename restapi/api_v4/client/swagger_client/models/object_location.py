# coding: utf-8

"""
    IBM Watson Machine Learning API

    ## Authorization  Step by step instruction how to use Watson Machine Learning service can be found [here](https://console.ng.bluemix.net/docs/services/PredictiveModeling/using_pm_service_dsx.html#using_pm_service_dsx)  ### IBM Watson Machine Learning Credentials  To start working with API one needs to generate an `access token` using the `username` and `password` available on the Service Credentials tab of the IBM Watson Machine Learning service instance or also available in the VCAP environment variable.  Example of the Service Credentials:  ```json {     \"url\": \"https://us-south.ml.cloud.ibm.com\",     \"access_key\": \"ERY9vcBfE4sE+F4g8hcotF9L+j81WXWeZv\",     \"username\": \"c1ef4b80-2ee2-458e-ab92-e9ca97ec657d\",     \"password\": \"030528d4-5a3e-4d4c-9258-5d553513be6f\",     \"instance_id\": \"a751c209-954e-dc32-b441-ad56ce7a9f40\" } ```  Example of obtaining `access token` from Token Endpoint using HTTP Basic Auth (for details please refer to Token section below):  ` curl --basic --user username:password https://us-south.ml.cloud.ibm.com/v4/identity/token `  The obtained `access token` needs to be prepended with `Bearer` word and it needs to be passed in the `Authorization` header for API calls.  Example of API request with `Bearer access token`:  ` curl https://us-south.ml.cloud.ibm.com/v4/models -H \"Authorization: Bearer eyJhbGciOiJSUzUxMiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRJZCI6ImU4YmQzZGM3LWI5Y2UtNDY1OC1iZ...\" `   # noqa: E501

    OpenAPI spec version: 4.x.y
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ObjectLocation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'type': 'str',
        'connection': 'object',
        'location': 'object'
    }

    attribute_map = {
        'name': 'name',
        'type': 'type',
        'connection': 'connection',
        'location': 'location'
    }

    def __init__(self, name=None, type=None, connection=None, location=None):  # noqa: E501
        """ObjectLocation - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._type = None
        self._connection = None
        self._location = None
        self.discriminator = None

        if name is not None:
            self.name = name
        self.type = type
        self.connection = connection
        self.location = location

    @property
    def name(self):
        """Gets the name of this ObjectLocation.  # noqa: E501


        :return: The name of this ObjectLocation.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ObjectLocation.


        :param name: The name of this ObjectLocation.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this ObjectLocation.  # noqa: E501

        The data source type like COS or dashDB. Allowed values for type are 's3' for COS and 'dashdb' for dashDB  # noqa: E501

        :return: The type of this ObjectLocation.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ObjectLocation.

        The data source type like COS or dashDB. Allowed values for type are 's3' for COS and 'dashdb' for dashDB  # noqa: E501

        :param type: The type of this ObjectLocation.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def connection(self):
        """Gets the connection of this ObjectLocation.  # noqa: E501


        :return: The connection of this ObjectLocation.  # noqa: E501
        :rtype: object
        """
        return self._connection

    @connection.setter
    def connection(self, connection):
        """Sets the connection of this ObjectLocation.


        :param connection: The connection of this ObjectLocation.  # noqa: E501
        :type: object
        """
        if connection is None:
            raise ValueError("Invalid value for `connection`, must not be `None`")  # noqa: E501

        self._connection = connection

    @property
    def location(self):
        """Gets the location of this ObjectLocation.  # noqa: E501

        For sentiment models, path will be hybrid pipeline id e.g.4cedab6d-e8e4-4214-b81a-2ddb122db2ab. For DL models, path will be training directory name e.g. training-ZZaQeX7mR  # noqa: E501

        :return: The location of this ObjectLocation.  # noqa: E501
        :rtype: object
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ObjectLocation.

        For sentiment models, path will be hybrid pipeline id e.g.4cedab6d-e8e4-4214-b81a-2ddb122db2ab. For DL models, path will be training directory name e.g. training-ZZaQeX7mR  # noqa: E501

        :param location: The location of this ObjectLocation.  # noqa: E501
        :type: object
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501

        self._location = location

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ObjectLocation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
